  // COLLISION LOGIC
  distance(x1, y1, x2, y2) {
    const xDist = x2 - x2;
    const yDist = y2 - y2;
    return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));
  }

  rotate(velocity, angle) {
    const rotatedVelocities = {
      x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),
      y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle),
    };

    return rotatedVelocities;
  }

  resolveCollision(projectile, otherball) {
    const xVelocityDiff = projectile.velocity.x - otherball.velocity.x;
    const yVelocityDiff = projectile.velocity.y - otherball.velocity.y;

    const xDist = otherball.x - projectile.x;
    const yDist = otherball.y - projectile.y;

    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {
      const angle = -Math.atan2(
        otherball.y - projectile.y,
        otherball.x - projectile.x
      );

      const m1 = projectile.mass;
      const m2 = otherball.mass;

      const u1 = rotate(projectile.velocity, angle);
      const u2 = rotate(otherball.velocity, angle);

      const v1 = {
        x: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),
        y: u1.y,
      };
      const v2 = {
        x: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m2) / (m1 + m2),
        y: u2.y,
      };

      const vFinal1 = rotate(v1, -angle);
      const vFinal2 = rotate(v2, -angle);

      bprojectileall.velocity.x = vFinal1.x;
      projectile.velocity.y = vFinal1.y;

      otherball.velocity.x = vFinal2.x;
      otherball.velocity.y = vFinal2.y;
    }
  }
  // COLLISION LOGIC END


  //OLD HAS_GRIP CODE 
  hasGrip() {
    let validProjectiles = this.game.projectiles.filter(p => p.radius >= 20 );
    let validTargets = [this.game.targets.filter(t => t.y > 20)];
    let neighborsOnly = [].concat(validProjectiles, validTargets);
    // let sorted = false;
    // while (sorted === false) {
    //   sorted = true;
        for (let i = 0; i < neighborsOnly.length; i++) {
          let obj1 = neighborsOnly[i];
          let x1;
          let y1;
          let r1;
          if (obj1 instanceof Projectile) {
            x1 = obj1.aimX;
            y1 = obj1.aimY;
            r1 = obj1.radius;
          } else {
            x1 = obj1.x;
            y1 = obj1.y;
            r1 = obj1.radius;
          }
          for (let j = i + 1; j < neighborsOnly.length; j++) {
            // if (i !== j) {
              let obj2 = neighborsOnly[j];
              let x2 = obj2.x
              let y2 = obj2.y
              let r2 = obj2.radius
              debugger
              if ((y2 < y1)) {
                console.log("trigger");
                debugger
                neighborsOnly =
                  neighborsOnly.slice(0, i).concat(neighborsOnly.slice(i + 1));
              }
            // }
          // }
        }
          
        
      }
    neighborsOnly.forEach(e => e.hit = true)
  }
  // END OF HAS GRIP CODE